@=~
~p maximum_input_line_length = infinity
$Id: SymbolOutput.fw,v 1.1 2015/05/13 10:17:34 pfahler Exp $ 

-----------------------------------------------------------
SymbolOutput.fw


Two lists of symbol entries are output: 
tree symbols and class symbols
Only those symbols are mentioned which occur in the tree
grammar, or are inherited directly or indirectly by tree
grammar symbols. That are those symbols which really contribute 
to the attribute evaluator.

Each entry for a symbol X consists of
  a list of symbols that X explicitly inherits from
  a list of symbols that X transitively inherits from
  a list of attributes with their class, and type
-----------------------------------------------------------

The symbols that occur in tree grammar productions are
marked IsUsed and all symbols from which they inherit
directly or indirectly. 
The property IsMarked is used to avoid multiple analysis.
~$~<Used properties~>==~{
IsUsed:   int;
IsMarked: int;
~}

~$~<Used computation~>==~{
SYMBOL AG COMPUTE
  SYNT.GotGrammarUses = MarkGrammarUses (THIS.Env)
  <- (SYNT.GotGrammarClasses, SYNT.GotInherit);
END;
~}

The output needs all properties of attributes be computed:
~$~<Output computation~>==~{
SYMBOL AG COMPUTE
  PTGOutFile 
     (CatStrStr (SRCFILE, ".symb"), OutputSymbols (THIS.Env))
  <- SYNT.GotAllAttrProps;
END;
~}

~O~<SymbolUses.head~>==~{
#include "SymbolUses.h"
~}
~O~<SymbolUses.h~>==~{
#include "args.h"
#include "envmod.h"

extern void MarkGrammarUses FEARGS ((Environment globenv));
extern void UnmarkSymbols ();
~}
~O~<SymbolUses.c~>==~{
#include "SymbolUses.h"
#include "GrammarRules.h"
#include "pdl_gen.h"

/* is set to the global scope by the call of MarkGrammarUses: */
static Environment globalEnv = NoEnv;

void UnmarkSymbols ()
/* on exit: IsMarked is set to 0 for all symbols */
{
  Binding b = DefinitionsOf (globalEnv);
  while (b != NoBinding)
  { DefTableKey k = KeyOf (b);
    if (GetIsSymbol (k, 0)) 
      ResetIsMarked (k, 0); 
    b = NextDefinition (b);
  }
}/*UnmarkSymbols */

#if defined(__cplusplus) || defined(__STDC__)
void MarkInheritUses (DefTableKey sym)
#else
void MarkInheritUses (sym) DefTableKey sym;
#endif
/* on exit:
     IsUsed flag is set for all symbols 
     which this sym inherits from 
*/
{ 
  Environment symEnv = GetUpperScope (sym, NoEnv);

  Binding b = DefinitionsOf (globalEnv);
  while (b != NoBinding)
  { DefTableKey k = KeyOf (b);
    if (GetIsSymbol (k, 0)) 
    { Environment fromEnv = GetUpperScope (k, NoEnv);
      if (Inheritsfrom (symEnv, fromEnv))
         ResetIsUsed (k, 1);
    }
    b = NextDefinition (b);
  }
}

#if defined(__cplusplus) || defined(__STDC__)
void MarkGrammarUses (Environment globenv)
#else
void MarkGrammarUses (globenv) Environment globenv;
#endif
/* on entry
     no IsUsed flags are set
   on exit
     IsUsed is set 
        for every symbol that occurs in a production and
        for every symbol that a used symbol inherits from
*/
{ RuleProdList rules;

  /* keep the global environment: */
  globalEnv = globenv;
  /* init IsMarked flags: */
  UnmarkSymbols ();

  /* set all symbols in productions IsUsed and call
     MarkInheritUses for each of them:
  */
  rules = GrammarRules;
  while (rules != NULLRuleProdList)
  { RuleProd rule = HeadRuleProdList (rules);
    ProdSymbolList prod = rule->prod;
    while (prod != NULLProdSymbolList)
    { ProdSymbol s = HeadProdSymbolList (prod);
      if (s->kind != IsProdLiteral)
      { ResetIsUsed (s->u.s.symbolkey, 1);
        if (!GetIsMarked (s->u.s.symbolkey, 0))
        { MarkInheritUses (s->u.s.symbolkey);
          ResetIsMarked (s->u.s.symbolkey, 1);
        }
      }
      prod = TailProdSymbolList (prod);
    }
    rules = TailRuleProdList (rules);
  }
}/* MarkGrammarUses */
~}

~O~<SymbolOutput.specs~>==~{
$/Output/PtgCommon.fw
$/Output/Indent.fw
~}

The output format is specified:
~O~<SymbolOutput.ptg~>==~{
UsedSymbols:
  "USED TREE SYMBOLS:" 
     [IndentIncr] $ [IndentDecr] [IndentNewLine]
  "USED CLASS SYMBOLS:"
     [IndentIncr] $ [IndentDecr] [IndentNewLine]
  "RULES:"
     [IndentIncr] $ [IndentDecr] [IndentNewLine]

Symbol: 
  [IndentNewLine] $ string $
  [IndentIncr] [IndentNewLine] "direct INHERITS " $ [IndentDecr]
  [IndentIncr] [IndentNewLine] "   all INHERITS " $ [IndentDecr]
  [IndentIncr] [IndentNewLine] "ATTRIBUTES" $ [IndentDecr]
  [IndentNewLine] 

Rule:
  [IndentNewLine] $ string $
  [IndentIncr] [IndentNewLine] "ATTRIBUTES" $ [IndentDecr]
  [IndentNewLine] 

Coord: 
  " (" $ int ", " $ int ")"

Attribute:
  [IndentNewLine] $ string $ ": " $ ", " $ $

DefaultType:
  " (by default)"
~}

~O~<SymbolOutput.head~>==~{
#include "SymbolOutput.h"
#include "source.h"
~}

~O~<SymbolOutput.h~>==~{
#include "args.h"
#include "envmod.h"
#include "ptg_gen.h"
extern PTGNode OutputSymbols FEARGS ((Environment globenv));
extern PTGNode OutCoord FEARGS ((DefTableKey k));
~}

~O~<SymbolOutput.c~>==~{
#include "SymbolOutput.h"
#include "GrammarRules.h"
#include "Attribute.h"
#include "csm.h"
#include "pdl_gen.h"

/* is set to the global scope by the call of OutputSymbols: */
static Environment globalEnv = NoEnv;

#if defined(__cplusplus) || defined(__STDC__)
PTGNode OutCoord (DefTableKey k)
#else
PTGNode OutCoord (k) DefTableKey k;
#endif
{ CoordPtr c = GetCoord (k, NoPosition);
  if (c == NoPosition)
    return PTGCoord (0, 0);
  else
    return PTGCoord (LineOf(*c),ColOf(*c));
}

#if defined(__cplusplus) || defined(__STDC__)
PTGNode OutAllInherits (DefTableKey sym)
#else
PTGNode OutAllInherits (sym) DefTableKey sym;
#endif
/* outputs a list of symbols that sym inherits from */
{ PTGNode res = PTGNULL;
  Environment symEnv = GetUpperScope (sym, NoEnv);

  Binding b = DefinitionsOf (globalEnv);
  while (b != NoBinding)
  { DefTableKey k = KeyOf (b);
    if (GetIsSymbol (k, 0)) 
    { Environment fromEnv = GetUpperScope (k, NoEnv);
      if (symEnv != fromEnv && Inheritsfrom (symEnv, fromEnv))
         res = PTGCommaSeq 
           (res, PTGAsIs (StringTable (IdnOf (b))));
    }
    b = NextDefinition (b);
  }
  return res;
}

#if defined(__cplusplus) || defined(__STDC__)
PTGNode OutDirectInherits (DefTableKey sym)
#else
PTGNode OutDirectInherits (sym) DefTableKey sym;
#endif
/* outputs a list of symbols that sym inherits from */
{ PTGNode res = PTGNULL;
  Environment symEnv = GetUpperScope (sym, NoEnv);

  InheritPtr inh = DirectInherits (symEnv);
  while (inh != NoInherit)
  { 
    res = PTGCommaSeq (res, 
       PTGAsIs 
         (StringTable 
            (GetNameSym (KeyOfEnv (EnvOfInherit (inh)), 0))));
    inh = NextInherit (inh);
  }
  return res;
}

#if defined(__cplusplus) || defined(__STDC__)
PTGNode OutAttributes (DefTableKey sym)
#else
PTGNode OutAttributes (sym) DefTableKey sym;
#endif
/* outputs the list of attributes of sym */
{ PTGNode res = PTGNULL;
  Environment symEnv = GetAttrScope (sym, NoEnv);

  Binding b = DefinitionsOf (symEnv);
  while (b != NoBinding)
  { DefTableKey k = KeyOf (b);
    DefTableKey tp = GetAttrType (k, NoKey);
    PTGNode outtp =
      (tp == NoKey ? PTGAsIs ("No Type") :
         PTGAsIs (StringTable (GetNameSym (tp, 0))));
    int cl = GetAttrClass (k, NoClass);
    PTGNode outcl =
      (cl == SYNTClass ? PTGAsIs ("SYNT") :
       cl == INHClass  ? PTGAsIs ("INH")  : 
       PTGAsIs ("No Class"));

    res = PTGSeq (res,
      PTGAttribute
        (StringTable (IdnOf (b)),
         OutCoord (k),
         outcl,
         outtp,
         GetAttrTypeDefault (k, 0) ? PTGDefaultType() : PTGNULL));

    b = NextDefinition (b);
  }
  return res;
}

#if defined(__cplusplus) || defined(__STDC__)
PTGNode OutputSymbols (Environment globenv)
#else
PTGNode OutputSymbols (globenv) Environment globenv;
#endif
{ PTGNode treeSyms = PTGNULL, classSyms = PTGNULL,
          rules = PTGNULL;
  Binding b;
  globalEnv = globenv;
  
  b = DefinitionsOf (globalEnv);
  while (b != NoBinding)
  { DefTableKey k = KeyOf (b);
    if (GetIsSymbol (k, 0) && GetIsUsed (k, 0))
    { PTGNode outsym = 
        PTGSymbol 
           (StringTable (IdnOf (b)), 
            OutCoord (k),
            OutDirectInherits (k),
            OutAllInherits (k),
            OutAttributes (k));
      if (GetIsTreeSym (k, 0))
        treeSyms = PTGSeq (outsym, treeSyms);
      else /* assumed: IsCLASSSym set to 1 or unset */
        classSyms = PTGSeq (outsym, classSyms);
    } else
    if (GetIsRule (k, 0))
      rules = PTGSeq (rules, 
        PTGRule
          (StringTable (IdnOf (b)),
           OutCoord (k),
           OutAttributes (k)));

    b = NextDefinition (b);
  }
  return PTGUsedSymbols (treeSyms, classSyms, rules);
}
~}

~O~<SymbolOutput.pdl~>==~{
~<Used properties~>
~}

~O~<SymbolOutput.lido~>==~{
~<Used computation~>
~<Output computation~>
~}
