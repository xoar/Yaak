@=~
~p maximum_input_line_length = infinity
$Id: Grammar.fw,v 1.1 2015/05/13 10:17:34 pfahler Exp $ */

-----------------------------------------------------------
Grammar.fw

The set of rules obtained by GrammarRules is assumed and 
checked for being a complete, consistent, and single rooted 
tree grammar.

LISTOF rules are substituted here.

The symbols are classified to be terminals, nonterminals,
or the root nonterminal.

The positions of nonterminals in productions are set (nontermpos).
-----------------------------------------------------------

Check whether symbols which are specified TREE occur in the grammar, 
and whether symbols which occur in the grammar, are not specified CLASS.
A warning is given if a symbol inherits from a symbol in the grammar.
~$~<CheckGramSymbs.lido~>==~{
SYMBOL AG COMPUTE
  SYNT.GotIsTreeSym = CONSTITUENTS SyntId.GotIsTreeSym;
END;

SYMBOL SyntId COMPUTE
  SYNT.GotIsTreeSym = ResetIsTreeSym (THIS.Key, 1);

  IF (AND (GetIsCLASSSym (THIS.Key, 0),
           NOT (GetIsClassInRuleReported (THIS.Key, 0))),
     ORDER (
       ResetIsClassInRuleReported (THIS.Key, 1),
       message
         (ERROR, CatStrInd
                   ("May not occur in a RULE: ",
          THIS.Sym), 0, COORDREF)))
  <- (INCLUDING AG.GotIsTreeSym, INCLUDING AG.GotTREECLASS);
END;

SYMBOL SymbolDefId COMPUTE
  IF (AND (NOT (GetIsTreeSym (THIS.Key, 0)),
      AND (INCLUDING SymbolSpecs.IsTREESym,
           NOT (GetIsNotInRuleReported (THIS.Key, 0)))),
     ORDER (
       ResetIsNotInRuleReported (THIS.Key, 1),
       message
         (ERROR, CatStrInd
                   ("Does not occur in a RULE: ",
          THIS.Sym), 0, COORDREF)))
  <- INCLUDING AG.GotIsTreeSym;

  IF (AND (GetIsTreeSym (THIS.Key, 0),
      AND (INCLUDING SymbolSpecs.IsCLASSSym,
           NOT (GetIsInRuleReported (THIS.Key, 0)))),
     ORDER (
       ResetIsInRuleReported (THIS.Key, 1),
       message
         (ERROR, CatStrInd
                   ("May not occur in a RULE: ",
          THIS.Sym), 0, COORDREF)))
  <- INCLUDING AG.GotIsTreeSym;
END;

RULE: InheritSym ::= SymbolId COMPUTE
  IF (GetIsTreeSym (SymbolId.Key, 0),
  message
    (WARNING, CatStrInd
              ("INHERITS from a TREE symbol: ",
     SymbolId.Sym), 0, COORDREF))
  <- INCLUDING AG.GotTREECLASS;
END;
~}

Separate properties IsTerm, IsNonterm, IsRoot are used.

First, names of TERM definitions are set IsTerm:
~$~<SetTerm.lido~>==~{
SYMBOL TermSpec, SymAttrSpec, SymCompSpec: 
  IsTerm: int, TypeKey: DefTableKey;

SYMBOL SymAttrSpec COMPUTE 
  SYNT.IsTerm = 0; SYNT.TypeKey = NoKey; 
END;
SYMBOL SymCompSpec COMPUTE 
  SYNT.IsTerm = 0; SYNT.TypeKey = NoKey; 
END;
RULE: TermSpec ::= 'TERM' SymbolDefIds ':' TypeId COMPUTE
  TermSpec.IsTerm = 1;
  TermSpec.TypeKey = TypeId.Key;
END;

SYMBOL SymbolDefId COMPUTE
  SYNT.GotIsTerm = 
    IF (INCLUDING
          (SymAttrSpec.IsTerm, SymCompSpec.IsTerm, TermSpec.IsTerm),
      ORDER
        (ResetIsTerm (THIS.Key, 1),
         SetDiffType (
           THIS.Key, 
           INCLUDING 
            (SymAttrSpec.TypeKey, SymCompSpec.TypeKey, TermSpec.TypeKey),
           ErrorType)));

  IF (AND (INCLUDING
              (SymAttrSpec.IsTerm, SymCompSpec.IsTerm, TermSpec.IsTerm),
           EQ (GetType (THIS.Key, NoKey), ErrorType)),
  message 
    (ERROR, CatStrInd (
        "inconsistent types of terminal: ",
        THIS.Sym), 
     0, COORDREF))
   <- INCLUDING AG.GotGrammarClasses;
END;
~}

Check and report terminal/nonterminal inconsistencies.
The function ClassifySymbols sets left-hand side occurrences
to IsNonterminal and determines grammar roots.

Properties TermReported and RootReported are used to avoid multiple
reports:
~$~<CheckTerm.lido~>==~{
SYMBOL AG COMPUTE
  SYNT.GotGrammarClasses = 
     ORDER (TransformListofRules (SYNT.Env), ClassifySymbols ())
     <- (SYNT.GotGrammarRules, SYNT.RulesWritten, SYNT.GotIsTreeSym,
         CONSTITUENTS SymbolDefId.GotIsTerm);
END;

SYMBOL SymbolDefId COMPUTE
  IF (AND (INCLUDING
              (SymAttrSpec.IsTerm, SymCompSpec.IsTerm, TermSpec.IsTerm),
            GetIsNonterm (THIS.Key, 0)),
  message 
    (ERROR, CatStrInd (
        "Terminal occurs on left-hand side of a production: ",
        THIS.Sym), 
     0, COORDREF))
   <- INCLUDING AG.GotGrammarClasses;
END;

RULE: Production ::= SyntId '::=' SyntUnits COMPUTE
  IF (AND (GetIsTerm (SyntId.Key, 0), 
           NOT (GetTermReported (SyntId.Key, 0))),
  ORDER (ResetTermReported (SyntId.Key, 1),
  message 
    (ERROR, CatStrInd (
       "Left-hand side may not be specified TERM: ",
       SyntId.Sym),
     0, COORDREF)))
   <- INCLUDING AG.GotGrammarClasses;

  IF (AND (AND (MultipleRoots, GetIsRoot (SyntId.Key, 0)),
                NOT (GetRootReported (SyntId.Key, 0))),
  ORDER (ResetRootReported (SyntId.Key, 1),
  message
    (ERROR, CatStrInd (
       "One of the multiple grammar roots: ",
       SyntId.Sym),
     0, COORDREF)))
   <- INCLUDING AG.GotGrammarClasses;
END;

RULE: Production ::= SyntId 'LISTOF' Alts COMPUTE
  IF (AND (GetIsTerm (SyntId.Key, 0), 
           NOT (GetTermReported (SyntId.Key, 0))),
  ORDER (ResetTermReported (SyntId.Key, 1),
  message 
    (ERROR, CatStrInd (
       "Left-hand side may not be specified TERM: ",
       SyntId.Sym),
     0, COORDREF)))
   <- INCLUDING AG.GotGrammarClasses;

  IF (AND (AND (MultipleRoots, GetIsRoot (SyntId.Key, 0)),
                NOT (GetRootReported (SyntId.Key, 0))),
  ORDER (ResetRootReported (SyntId.Key, 1),
  message
    (ERROR, CatStrInd (
       "One of the multiple grammar roots: ",
       SyntId.Sym),
     0, COORDREF)))
   <- INCLUDING AG.GotGrammarClasses;
END;

RULE: Alt ::= SyntId COMPUTE
  IF (GetIsTerm (SyntId.Key, 0),
  message 
    (ERROR, CatStrInd (
       "LISTOF element may not be a terminal symbol: ",
       SyntId.Sym),
     0, COORDREF))
   <- INCLUDING AG.GotGrammarClasses;
END;

RULE: SyntUnit ::= '$' SyntId COMPUTE
  IF (GetIsTerm (SyntId.Key, 0),
  message 
    (WARNING, CatStrInd (
       "Tree insertion is ignored for a terminal symbol: ",
       SyntId.Sym),
     0, COORDREF))
   <- INCLUDING AG.GotGrammarClasses;
END;
~}

~O~<Grammar.lido~>==~{
~<CheckGramSymbs.lido~>
~<SetTerm.lido~>
~<CheckTerm.lido~>
~}

~O~<Grammar.pdl~>==~{
Type: DefTableKey [SetDiff];
ErrorType;
IsTerm: int;
IsNonterm: int;
IsRoot: int;
TermReported: int;
RootReported: int;
IsTreeSym: int;
IsNotInRuleReported: int;
IsInRuleReported: int;
IsClassInRuleReported: int;
DerivableFrom: DefTableKeyList; "DefTableKeyList.h"
~}

~O~<Grammar.head~>==~{
#include "Grammar.h"
~}

~O~<Grammar.h~>==~{
#ifndef GRAMMAR_H
#define GRAMMAR_H
#include "deftbl.h"
#include "envmod.h"

#include "DefTableKeyList.h"

extern DefTableKey GrammarRoot;
extern int MultipleRoots;
extern DefTableKeyList TreeSymbols;

extern void TransformListofRules (Environment env);

extern void ClassifySymbols ();
#endif
~}

~O~<Grammar.c~>==~{
#include "Grammar.h"
#include "GrammarRules.h"
#include "pdl_gen.h"
#include "MakeName.h"
#include "err.h"
#include "Strings.h"
#include <stdio.h>

DefTableKey GrammarRoot = NoKey;
int MultipleRoots = 0;

#if defined(__cplusplus) || defined(__STDC__)
void TransformListofRules (Environment env)
#else
void TransformListofRules (env) Environment env;
#endif
/* on entry
	the GrammarRules are completed,
	LISTOF rules are checked
   on exit
	LISTOF rules are substituted,
	generated rules are added
*/
{ RuleProdList rules = GrammarRules;
  while (rules != NULLRuleProdList)
  { RuleProd rule = HeadRuleProdList (rules);
    if (rule->islistof) {
	Binding newRuleBind;
	DefTableKey newRuleKey;
	RuleProd newRule;
	ProdSymbolList symbollist, alts;
	CoordPtr listRuleCoord = GetCoord (rule->rulekey, NoPosition);

	/* let the rule be RULE rr: Lhs LISTOF Xa | Xb END */
	/* create a new nonterminal named LST_Lhs: */
	DefTableKey oldlhskey = 
          (HeadProdSymbolList (rule->prod))->u.s.symbolkey;
	Binding listSymBind = 
	  BindIdn 
	    (env, PreIdnPost ("LST_", GetNameSym (oldlhskey, 0), ""));

	DefTableKey listSymKey = KeyOf (listSymBind);
	ResetIsNonterm (listSymKey, 1);
	ResetIsSymbol (listSymKey, 1);
	ResetIsTreeSym (listSymKey, 1);
	ResetNameSym (listSymKey, IdnOf (listSymBind));
	ResetCoord (listSymKey, listRuleCoord);

	/* create an empty rule RULE LST_0rr: LST_Lhs ::= END */
	newRuleBind =
	  BindIdn
	    (env, PreIdnPost ("LST_0", GetNameSym (rule->rulekey, 0), ""));
	newRuleKey = KeyOf (newRuleBind);
	ResetIsRule (newRuleKey, 1);
	ResetNameSym (newRuleKey, IdnOf (newRuleBind));
	ResetCoord (newRuleKey, listRuleCoord);
	symbollist =
	  ConsProdSymbolList
	    (MakeProdSymbol (listSymKey, 0, listRuleCoord),
	     NULLProdSymbolList);
	newRule = MakeRuleProd (newRuleKey, symbollist, 0, listRuleCoord);
	ResetRule (newRuleKey, newRule);

	/* create a rule for each alternative: 
		RULE LST_Xarr: LST_Lhs ::= Xa LST_Lhs END */
	alts = TailProdSymbolList (rule->prod);
	while (alts != NULLProdSymbolList) {
	  DefTableKey altkey = 
            (HeadProdSymbolList (alts))->u.s.symbolkey;
	  
	  newRuleBind =
	    BindIdn
	      (env, PreIdnPost ("LST_", 
				GetNameSym (altkey, 0),
				StringTable (GetNameSym (rule->rulekey, 0))));
	  newRuleKey = KeyOf (newRuleBind);
	  ResetIsRule (newRuleKey, 1);
	  ResetNameSym (newRuleKey, IdnOf (newRuleBind));
	  ResetCoord (newRuleKey, listRuleCoord);
	  symbollist =
	    ConsProdSymbolList
	      (MakeProdSymbol (listSymKey, 0, listRuleCoord),
	       ConsProdSymbolList
	         (MakeProdSymbol (altkey, 0, listRuleCoord),
		  ConsProdSymbolList
		    (MakeProdSymbol (listSymKey, 0, listRuleCoord),
		     NULLProdSymbolList)));
	  newRule = MakeRuleProd (newRuleKey, symbollist, 0, listRuleCoord);
	  ResetRule (newRuleKey, newRule);

	  alts = TailProdSymbolList (alts);
	}

	/* replace the right-hand side of rr by LST_Lhs */
	rule->islistof = 0;
	rule->prod->tail =
	  ConsProdSymbolList
		(MakeProdSymbol (listSymKey, 0, listRuleCoord),
		 NULLProdSymbolList);
    }
    rules = TailRuleProdList (rules);
  }
}/* TransformListofRules */

DefTableKeyList TreeSymbols = NULLDefTableKeyList;

void UpdateDerivableFrom (DefTableKey rhs, DefTableKey lhs) {
/*  rhs occurs on the right-hand side of a rule, that has lhs on
    its left-hand side.
    lhs is added to rhs' list DerivableFrom, if not yet in that list.
*/
   DefTableKeyList drvFr = GetDerivableFrom (rhs, NULLDefTableKeyList);
   DefTableKeyList dr = drvFr;
   while (dr != NULLDefTableKeyList) {
     DefTableKey hd = HeadDefTableKeyList (dr);
     if (hd == lhs) return;
     dr = TailDefTableKeyList (dr);
   }
   /* lhs is not in drvFr: */
   ResetDerivableFrom (rhs, ConsDefTableKeyList (lhs, drvFr));
}/* UpdateDerivableFrom */

void ClassifySymbols ()
/* on entry
        the GrammarRules are completed
   on exit
        the properties IsNonterm, IsTerm, IsRoot 
	are set and checked
*/
{ RuleProdList rules;
  int rootfound = 0;

  /* set IsNonterm IsTree and symbolpos=0 for left-hand side symbols
     and collect a list of all tree symbol keys: 
  */
  rules = GrammarRules;
  while (rules != NULLRuleProdList)
  { RuleProd rule = HeadRuleProdList (rules);
    ProdSymbol lhs = HeadProdSymbolList (rule->prod);
    ResetIsNonterm (lhs->u.s.symbolkey, 1);
    /* IsTreeSym has been set earlier. */
    TreeSymbols = 
      ConsDefTableKeyList (lhs->u.s.symbolkey, TreeSymbols);
    lhs->u.s.symbolpos = 0;
    rules = TailRuleProdList (rules);
  }

  /* set !IsRoot for all right-hand side symbols,
     set IsTerm for right-hand side symbols if !IsNonterm,
     set symbolpos for right-hand side symbols
     set DerivableFrom lhs for each rhs symbol: */
  rules = GrammarRules;
  while (rules != NULLRuleProdList)
  { RuleProd rule = HeadRuleProdList (rules);
    DefTableKey lhskey = 
       (HeadProdSymbolList (rule->prod))->u.s.symbolkey;
    ProdSymbolList rhs = TailProdSymbolList (rule->prod);
    int nontermpos = 1, termpos = 1;

    while (rhs != NULLProdSymbolList)
    { ProdSymbol s = HeadProdSymbolList (rhs);
      if (s->kind != IsProdLiteral)
      { ResetIsRoot (s->u.s.symbolkey, 0);
        if (!(GetIsNonterm (s->u.s.symbolkey, 0)))
        {    s->u.s.symbolpos = termpos++;
             ResetIsTerm (s->u.s.symbolkey, 1);
        }
        else {
          s->u.s.symbolpos = nontermpos++;
          UpdateDerivableFrom (s->u.s.symbolkey, lhskey);
        }
      }
      rhs = TailProdSymbolList (rhs);
    }
    rules = TailRuleProdList (rules);
  }

  /* find roots: */
  rules = GrammarRules;
  while (rules != NULLRuleProdList)
  { RuleProd rule = HeadRuleProdList (rules);
    ProdSymbol lhs = HeadProdSymbolList (rule->prod);

    /* IsRoot is not set to 0 if symbol does not occur on rhs */
    if (GetIsRoot (lhs->u.s.symbolkey, 1))
    { ResetIsRoot (lhs->u.s.symbolkey, 1);
      rootfound = 1;
      if (GrammarRoot == NoKey) GrammarRoot = lhs->u.s.symbolkey;
      else if (GrammarRoot != lhs->u.s.symbolkey)
         MultipleRoots = 1; /* to be reported in RULE context */
    }
    rules = TailRuleProdList (rules);
  }

  if (!rootfound)
     message (ERROR, 
              "No tree grammar root found",
              0, NoPosition);
}/* ClassifySymbols */
~}

~O~<Grammar.msg~>==~{
"Terminal occurs on left-hand side of a production: "
"Left-hand side may not be specified TERM: "
"One of the multiple grammar roots: "
"No tree grammar root found"
"May not occur in a RULE: "
"Does not occur in a RULE: "
"INHERITS from a TREE symbol: "
"inconsistent types of terminal: "
"LISTOF element may not be a terminal symbol: "
"Tree insertion is ignored for a terminal symbol: "
~}
