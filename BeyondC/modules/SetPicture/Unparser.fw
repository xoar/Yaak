@p maximum_input_line_length = infinity


@O@<Language.lido@>==@{

    RULE: SetPictureSubtask::= EntityNameUse 'set' 'current' 'picture' 'to' string_literal
    COMPUTE

        SetPictureSubtask.IdemPtg =
            PTGSetPictureProcess(GetId(EntityNameUse[1].Key,0),
                                 StringTable(string_literal)
                                 ) <- INCLUDING program.GotEntityId ;

    END;


    RULE: SetPictureSubtask::= EntityNameUse 'set' 'current' 'animation' 'picture' 'to' string_literal 'with' 'index' integer_constant
    COMPUTE

        SetPictureSubtask.IdemPtg =
            PTGSetAnimPictureProcess(GetId(EntityNameUse[1].Key,0),
                                 StringTable(string_literal),
                                 StringTable(integer_constant)
                                 ) <- INCLUDING program.GotEntityId ;

    END;

    RULE: SetPictureSubtask::= EntityNameUse 'set' 'current' 'animation' 'picture' 'to' string_literal 'with' 'index' IdUse
    COMPUTE

        SetPictureSubtask.IdemPtg =
            PTGSetAnimPictureProcess(GetId(EntityNameUse[1].Key,0),
                                 StringTable(string_literal),
                                 StringTable(IdUse.Sym)
                                 ) <- INCLUDING program.GotEntityId ;

    END;
@}


@O@<Language.ptg@>==@{


SetPictureProcess:
    "    CharacterSetCurrentPictureById(pluginList," $1 int " ," $2 string ");\n"


SetAnimPictureProcess:
    "    CharacterSetCurrentAnimationPictureById(pluginList," $1 int" ," $2 string "," $3 string ");\n"

@}
